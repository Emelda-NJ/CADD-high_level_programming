# Visualizing Data:
"""
Data visualization in Python is the process of creating visual representations of data to make it easier to understand patterns, trends, and insights. 
Use libraries like 'matplotlib', 'Plotly' and 'seaborn' to create charts and graphs for better understanding. 
Matplotlib: Great for basic plots like line graphs, bar charts, and scatter plots. 
Seaborn: Built on top of Matplotlib, it makes prettier and more complex visualizations with less code. 
Plotly: Ideal for interactive plots you can click on and explore.
Uses of matplotlib - visualization for pattern identification, trend, and outliers.
"""

# Importing Required Libraries
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import pyplot as plt

# Numpy
"""
NumPy (Numerical Python) is an open-source Python library, that adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays. 
It also has functions for working in the domain of linear algebra, Fourier transform, and matrices. 
Numpy can be used to generate bar charts, box plot, histogram, pie chart, line plot, and scatter plots.
"""

# Basic Scatter Plot
x=[2,4,6,8,10,12]   #coordinates of the data points to be plotted
y=[20,40,60,80,100,120]
plt.scatter(x,y)    #function creates a scatter plot of x vs y
plt.scatter(x,y,color="red",edgecolors="black")   #the points are colored red and have black edges
plt.plot(x,y,color="green")   #creates a line plot with the line colored green
plt.show()    #function displays the plot

# BASIC LINE PLOT
# Creating the Data
x=np.arange(1,11)   #Generates an array of integers from 1 to 10 (inclusive)
x   # array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
y=2*x+5   #Creates a new array y where each element is calculated as 2 * x + 5
y   # array([7, 9, 11, 13, 15, 17, 19, 21, 23, 25])
plt.plot(x,y,"ob")  #Plots x vs y using blue circle markers (o stands for circle marker, and b stands for blue color)
# Adding Titles and Labels
plt.title("Matplotlib Demo")
plt.xlabel("X axis")
plt.ylabel("y axis")
plt.show()    #Displays the plot

# LINE PLOT OF SINE WAVE
# Creating the Data
x=np.arange(0,3*np.pi,0.1)  #generates values starting from 0 to just below 3 * π (approximately 9.42), with a step of 0.1
x
y=np.sin(x)   #Applies the sine function to each element in the x array
y
plt.plot(x,y)   #creating a line plot of the sine wave
plt.xlabel("X axis")
plt.ylabel("y axis")
plt.show()    #Displays the plot

# CREATING TWO PLOTS
# Creating the Data
x=np.arange(0,3*np.pi,0.1)  #Generates an array of values starting from 0 to just below 3 * π (approximately 9.42), with a step of 0.1
y=np.sin(x)   #Applies the sine function to each element in the x array
z=np.cos(x)   #Applies the cosine function to each element in the x array

# First Plot (Sine Wave)
plt.subplot(2,1,1)    #Creates a subplot grid with 2 rows and 1 column, and sets the current plot to the first subplot
plt.title("sine plot")    #Sets the title for the first subplot
plt.plot(x,y)   #Plots x vs y in the first subplot

# Second Plot (Cosine Wave)
plt.subplot(2,1,2)    #Sets the current plot to the second subplot in the 2x1 grid
plt.title("Cos plot")   #Sets the title for the second subplot
plt.plot(x,z)   #Plots x vs z in the second subplot
plt.tight_layout()    #Adjusts the spacing between subplots to prevent overlap
plt.show()    #Displays the plot

# LINE PLOT
# Creating the Data
gene=['geneA','geneB','geneC','geneD']  #Creates a list of gene names
gene
exp_val=np.random.rand(len(gene))*100   #Generates an array of random expression values between 0 and 100 for each gene.
exp_val
plt.plot(gene,exp_val)    #Plots the gene names on the x-axis against the expression values on the y-axis.
plt.plot(gene,exp_val,marker="o",linestyle="-") #Adds circle markers (marker="o") at each data point and connects the points with a solid line (linestyle="-")
plt.show()    #Displays the plot.
# 'np.random.rand(len(gene))' creates an array of random values between 0 and 1 with the same length as the gene list, and multiplying by 100 scales these values to the range 0 to 100.

# BAR CHART
# Creating the Data
# These lists define the positions and heights of the first set of bars
x = [6, 9, 13]
y = [15, 28, 10]
# These lists define the positions and heights of the second set of bars
x1 = [5, 10, 12]
y1 = [20, 17, 13]
plt.bar(x,y,align='center') #Plots another bar chart with bars positioned at x and heights at y. The bars are centered on the x positions (align='center')
plt.bar(x1,y1,color='g')  #Plots a bar chart with bars positioned at x1 and heights defined by y1. The color of the bars is set to green
plt.title("BAR plot")
plt.show()

# HISTOGRAM
data=np.random.rand(1000)   #Generates an array of 1000 random values between 0 and 1
plt.hist(data,bins=30,edgecolor="black")  #Creates a histogram with the following parameters
"""
data: The array of data values to be plotted.
bins=30: Specifies that the data should be divided into 30 bins (or intervals).
edgecolor="black": Sets the color of the edges of the bins to black, which makes the bins more distinct and easier to visualize
"""
plt.show()   # Display the plot

# BOX PLOT
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

data=[np.random.rand(100) for _ in range(4)]  #creates a list of 4 arrays, each containing 100 random values between 0 and 1
"""
['np.random.rand(100)' for _ in range(4)]: This creates a list of 4 arrays, each containing 100 random values between 0 and 1. 
The 'np.random.rand(100)' function generates an array of 100 random values; and 
the list comprehension 'for _ in range(4)' repeats this process 4 times, resulting in a list of 4 arrays.
"""
plt.boxplot(data)   #Plots a boxplot for each column in the DataFrame
plt.show()    #Displays the plot

# GRAPH
import numpy as np
import matplotlib.pyplot as plt
# Generate data
x = np.linspace(0, 10, 100)  # Generate 100 equally spaced points from 0 to 10
y = np.sin(x)                 # Compute sine function values for each x

# Plot data
plt.plot(x, y, label='sin(x)')  # Plot sine function
plt.xlabel('x')                 # Label x-axis
plt.ylabel('sin(x)')            # Label y-axis
plt.title('Sine Function')      # Add title
plt.legend()                    # Add legend to displays 'sin(x)' to identify the plotted curve
plt.grid(True)                  # Add grid
plt.show()                      # Display plot
