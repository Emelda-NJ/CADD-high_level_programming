#Functions in Python are like small programs within your main program. They allow you to organize your code, make it reusable, and easier to manage
#Types of Functions - built-in, and user defined

# user defined
"""
def function_name(parameters):
  #statements--body
  return expression
"""

#Defining a Function: You use the def keyword to create a function. Give it a name and specify any inputs (parameters) it should take.
SYNTAX: def greet(name):
            print(f"Hello, {name}!")
This defines a function called 'greet' that takes one parameter, 'name'.

#Calling a Function: Once you've defined a function, you can use it by "calling" it and passing in any required parameters.
EXAMPLE: greet("Alice")
This will output: Hello, Alice!

#Return Values: Functions can also return values. This is useful when you want the function to compute something and give you the result.
SYNTAX: def add(a, b):
            """Returns the sum of a and b."""
            return a + b
When you call this function with two numbers, it will return their sum.
EXAMPLE 1: result = add(3, 4)
        print(result)  # Output: 7
EXAMPLE 2:  def my_function(x):
                return 5 * x
            print(my_function(3))
            print(my_function(5))
            print(my_function(9))
>>> 15
    25
    45

#EXAMPLES
# declaration
def my_function():
  print("Have a nice day...!!!")

# calling
my_function()
>>>Have a nice day...!!!

#NOTE: function definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error.
#SYNTAX:  def myfunction():
              pass
#NOTE ALSO: String formatting is the process of inserting a custom string or variable in predefined text. 
#custom_string = print(f"{custom_string} is a powerful technique") OR print(f"Hello, {name}!")

# parameter /argument
"""
Parameters are variables listed inside the parentheses in the function definition.
They act as placeholders for the values that will be passed to the function.
SYNTAX: def greet(name):      # 'name' is a parameter
            print(f"Hello, {name}!")
Arguments are the actual values that are passed to the function when it is called.
They are assigned to the corresponding parameters in the function definition.
SYNTAX: greet("Alice")  # 'Alice' is an argument
EXAMPLE:
def add(a, b):  # 'a' and 'b' are parameters
    return a + b
result = add(3, 4)  # '3' and '4' are arguments
print(result)  # Output: 7
Parameters: a and b are parameters in the function definition add(a, b).
Arguments: 3 and 4 are arguments passed to the function add when it is called.

Information can be passed into functions as arguments.
Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.
Arguments are often shortened to args
By default, a function must be called with the correct number of arguments.
Meaning that if your function expects 2 parameters, you have to call the function with 2 arguments, not more, and not less.
EXAMPLE:
def my_function(fname):      #Parameter
  print(fname + " Refsnes")

my_function("Emil")        #argument
my_function("Tobias")      #argument
my_function("Linus")       #argument
>>> Emil Refsnes
    Tobias Refsnes
    Linus Refsnes

Arbitrary Arguments, *args
If you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.

This way the function will receive a tuple of arguments, and can access the items accordingly
EXAMPLE:
def my_function(*kids):
  print("The youngest child is " + kids[2])
my_function("Emil", "Tobias", "Linus")
>>>The youngest child is Linus

Keyword Arguments
You can also send arguments with the key = value syntax.
This way the order of the arguments does not matter.
EXAMPLE:
def my_function(child3, child2, child1):
  print("The youngest child is " + child3)
my_function(child1 = "Emil", child2 = "Tobias", child3 = "Linus")
>>>The youngest child is Linus

Arbitrary Keyword Arguments, **kwargs
If you do not know how many keyword arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition.
This way the function will receive a dictionary of arguments, and can access the items accordingly
EXAMPLE:
def my_function(**kid):
  print("His last name is " + kid["lname"])
my_function(fname = "Tobias", lname = "Refsnes")
>>>His last name is Refsnes

Default Parameters: You can provide default values for parameters. If you don't pass a value for that parameter, the default is used.
SYNTAX: def greet(name="World"):
    print(f"Hello, {name}!")
Calling greet() without an argument will output: Hello, World!
EXAMPLE:  def my_function(country = "Norway"):
              print("I am from " + country)
          my_function("Sweden")
          my_function("India")
          my_function()
          my_function("Brazil")
>>> I am from Sweden
    I am from India
    I am from Norway
    I am from Brazil

Multiple Parameters: Functions can take multiple parameters.
SYNTAX: def greet(name, age):
            print(f"Hello, {name}! You are {age} years old.")
You need to provide both values when calling the function.
EXAMPLE: greet("Alice", 30)
This will output: Hello, Alice! You are 30 years old.

Multiple Arguments: Passing a List as an Argument
You can send any data types of argument to a function (string, number, list, dictionary etc.), and it will be treated as the same data type inside the function.
EXAMPLE: 
def my_function(food):
  for x in food:
    print(x)
fruits = ["apple", "banana", "cherry"]
my_function(fruits)
>>> apple
    banana
    cherry
"""

#Without the use of function
num=20
if num%2==0:
  print("result:Even number")
else:
  print("result:Odd Number")
>>>result:Even number

#With the use of function
# declaration
def evenOdd(x):      #giving a parameter
  if(x%2==0):
    print("Result:Even number")
  else:
    print("Result:Odd Number")
# calling
evenOdd(10)        #passing an argument
>>>Result:Even number
evenOdd(79)        #passing an argument
>>>Result:Odd Number

#default arg,keyword arg,positional,Arbitrary
# Default arg
def greet(name="Guest"):
  return f"Hello,{name}"
print(greet())
print(greet("Students..!!!"))
>>> Hello,Guest
    Hello,Students..!!!

# Keyword arg
def language(ab,xy):
  print(ab,xy)
language(ab='Python',xy='Programming')
language(xy='Python',ab='Programming')
language(xy='Programming',ab='Python')
>>> Python Programming
    Programming Python
    Python Programming

# Postional arg
""" Positional arguments are passed to a function in a specific order, matching the parameters in the function's definition. 
The order in which you pass these arguments is crucial, as it determines which values are assigned to which parameters."""
def info(name, age):
    print("Hi I am", name)
    print("My age is", age)
info("John", 20)
>>> Hi I am John
    My age is 20

info(20, "John")
>>> Hi I am 20
    My age is John

def div(a,b):
  return a/b
div(5,20)
>>>0.25

div(20,5)
>>>4.0

# Arbitrary arg
def sum_number(*args):
  total=0
  for num in args:
    total+=num
  return total
# calling
sum_number(1,2,3)          #6
sum_number(10,20,30,40,50,60,70,80)      #360

def variants(*variants):
  for var in variants:
    print(f"Analyzing variants:{var}")
# calling
variants("SNP","Indels","CNV3")
>>> Analyzing variants:SNP
    Analyzing variants:Indels
    Analyzing variants:CNV3

# Arbitrary keyword
def greet(**kwargs):
  for key,value in kwargs.items():
    print(f"Hello {key}! You are {value} years old")
# call
greet(Seeta=30,Geet=25,Neeta=35)
>>> Hello Seeta! You are 30 years old
    Hello Geet! You are 25 years old
    Hello Neeta! You are 35 years old


#INSTALLATION OF DEPENDENCIES
!pip install -q condacolab   #installs the condacolab package using pip. The -q flag stands for "quiet mode" and minimizes the output.
import condacolab            #imports the condacolab package.
condacolab.install()         #installs and configures Conda in your Colab environment.

!conda install -c conda-forge rdkit -y      #installs the RDKit library from the conda-forge channel using Conda. The -y flag automatically confirms the installation.

"""
Defines a function to calculate the molecular weight of a compound given its SMILES string.
SMILES is the â€œSimplified Molecular Input Line Entry System"
Parameters:
smiles_string (str): SMILES string of the compound.
Returns:
float: Molecular weight of the compound.
"""

from rdkit import Chem          #Imports the Chem module from the RDKit library, which provides functions for working with chemical structures.
from rdkit.Chem import Descriptors      #Imports the Descriptors module from RDKit, which provides functions to compute molecular descriptors, including molecular weight.
def calculate_molecular_weight(smiles_string):        #Defines a function named 'calculate_molecular_weight' that takes a SMILES string as its parameter.
    molecule = Chem.MolFromSmiles(smiles_string)      #Converts the SMILES string to a molecule object using RDKit's 'MolFromSmiles' function.
    if molecule is not None:                    #Checks if the molecule object is valid.
        return Descriptors.MolWt(molecule)     #If the molecule object is valid, it calculates and returns the molecular weight using RDKit's MolWt function from the Descriptors module.
    else:
        raise ValueError("Invalid SMILES string")        #Raises a ValueError if the SMILES string is invalid.
#Function call
smiles = "CCO"          #Assigns the SMILES string for ethanol ("CCO") to the variable smiles.
print(f"The molecular weight of Ethanol is: {calculate_molecular_weight(smiles)}")    #Calls the calculate_molecular_weight function with the SMILES string for ethanol and prints the result.
