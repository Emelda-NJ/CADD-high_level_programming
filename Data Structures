# Built-in data types in Python used to store collections of data: Lists, Tuple, Set, and Dictionary

#LISTS
"""
Lists are created using square brackets
List items are ordered, changeable or mutable, and allow duplicate values.
List items are indexed, the first item has index [0], the second item has index [1] etc.
If you add new items to a list, the new items will be placed at the end of the list.
List items can be of any data type
A list can contain different data types: strings, integers and boolean values etc.
To determine how many items a tuple has, use the len() function
"""

my_list=[1,"NGS","CADD",3.14,True]
my_list
[1, 'NGS', 'CADD', 3.14, True]

my_list[0]
1
my_list[3]
3.14
my_list[2:5]
["CADD",3.14,True]
my_list[1,3,5]
ERROR
my_list[c(1,3,5)] #appears to be attempting to access elements from a list using a specific index selection method.
['NGS', 3.14]

type[my_list]
my_list
List

my_list[1]="OMICS"
my_list
[1, 'OMICS', 'CADD', 3.14, True]

my_list.append("Pgx")
my_list
[1, 'OMICS', 'CADD', 3.14, True, 'Pgx']

my_list.remove("Pgx")
my_list
[1, 'OMICS', 'CADD', 3.14, True]

my_list=[1,"NGS","CADD",3.14,True,[1,2,3,4,5]]
my_list
my_list[5]
[1, 2, 3, 4, 5]

list1=["DNA","RNA","Prt"]
list1    #['DNA','RNA','Prt']
list2=[["DNA","RNA","Prt"],['Enzym']]
#print
>>>print("\n Multi-Dimentional List:")
>>>print(list2)
Multi-Dimentional List:
[['DNA', 'RNA', 'Prt'], ['Enzym']]
#Indexing in Lists
list1[2]  #'Prt'
list2[0][2]  #'Prt'
list2[0]  #['DNA', 'RNA', 'Prt']
list2[1]  #['Enzym']
list1[-1]  #'Prt'
list1[-3]  #'DNA'

#NOTE: INDEXING
abcdefgh
left -----> right
0,1,2,3,4...8   (Postive indexing)
left<----- right
-8,-7,-6,-5...-1  (Negative indexing)

#adding new items to a list
fruits=['apple','banana']
fruits.append("fig")
fruits    #['apple', 'banana', 'fig']

#adding and replacing an item at the first positon in a list
fruits[1]='grapes'
fruits    #['apple', 'grapes', 'fig']

#Change the values "banana" and "cherry" with the values "blackcurrant" and "watermelon"
fruits = ["apple", "banana", "cherry", "orange", "kiwi", "mango"]
fruits[1:3] = ["blackcurrant", "watermelon"]
print(fruits)   #['apple', 'blackcurrant', 'watermelon', 'orange', 'kiwi', 'mango']

#removing items from a list
fruits = ["apple", "banana", "cherry"]
fruits.remove("banana")
print(fruits)   #['apple', 'cherry']

#The pop() method removes the specified index.
fruits = ["apple", "banana", "cherry"]
fruits.pop(1)
print(fruits)   #['apple', 'cherry']

#The del keyword also removes the specified index
fruits = ["apple", "banana", "cherry"]
del fruits[0]
print(fruits)   #['banana', 'cherry']

#The del keyword can also delete the list completely.
fruits = ["apple", "banana", "cherry"]
del fruits
print(fruits) #this will cause an error because you have succsesfully deleted "fruits".

#The clear() method empties the list. The list still remains, but it has no content.
fruits = ["apple", "banana", "cherry"]
fruits.clear()
print(fruits)   #[]


#TUPLE
"""
A tuple is a collection which is ordered and unchangeable.
Tuples are written with round brackets.
Tuple items are ordered, unchangeable or immutable, and allow duplicate values.
Tuple items are indexed, the first item has index [0], the second item has index [1] etc.
Tuple items can be of any data type
A tuple can contain different data types: strings, integers and boolean values etc.
To determine how many items a tuple has, use the len() function.
"""
my_tuple=(1,2,3,4,5)
my_tuple
(1,2,3,4,5)

type(my_tuple)
Tuple

x=()
>>>print(x)
()
type(x) #tuple

tuple_1=tuple()
type(tuple_1) #tuple

num_tuple=11,22,33,44,55
type(num_tuple) #tuple

t2=11,
type(t2) #tuple

list1=[11,22,33,44,55]
list1

t3=tuple(list1)
type(t3) #tuple

t4=('genomics','proteomics')
type(t4) #tuple


#SETS
"""
A set is a collection which is unordered, unchangeable*, and unindexed.
Set items are unchangeable, but you can remove items and add new items (mutable).
Sets are written with curly brackets.
Set items can appear in a different order every time you use them, and cannot be referred to by index or key.
Sets cannot have two items with the same value.
The values True and 1 are considered the same value in sets, and are treated as duplicates
False and 0 is considered the same value.
To determine how many items a set has, use the len() function.
Set items can be of any data type
A set can contain different data types: strings, integers and boolean values etc.
"""

#two methods of declaring set; by using set function and curling brackets
#you can create an empty set in Python using the set() function. Using curly braces {} will create an empty dictionary instead of a set.
#To create a set you must include values or items inside the curly braces {} or use set() function.
empty_set=set()
type(empty_set)   #set

set1={1,2,3.14,"NGS","CADD",90}
print(set1)
type(set1)   #set

thisset = set(("apple", "banana", "cherry"))
print(thisset)   #{'banana', 'apple', 'cherry'}
# Note: the set list is unordered, so the result will display the items in a random order.

#Get the Length of a Set
thisset = {"apple", "banana", "cherry"}
print(len(thisset))   #3

#Once a set is created, you cannot change its items, but you can add new items. To add one item to a set use the add() method.
thisset = {"apple", "banana", "cherry"}
thisset.add("orange")
print(thisset)   #{'apple', 'cherry', 'orange', 'banana'}

#To add items from another set into the current set, use the update() method.
thisset = {"apple", "banana", "cherry"}
tropical = {"pineapple", "mango", "papaya"}
thisset.update(tropical)
print(thisset)   #{'apple', 'mango', 'cherry', 'pineapple', 'banana', 'papaya'}

#The object in the update() method does not have to be a set, it can be any iterable object (tuples, lists, dictionaries etc.).
thisset = {"apple", "banana", "cherry"}
mylist = ["kiwi", "orange"]
thisset.update(mylist)
print(thisset)   #{'banana', 'cherry', 'apple', 'orange', 'kiwi'}

#To remove an item in a set, use the remove(), or the discard() method.
thisset = {"apple", "banana", "cherry"}
thisset.remove("banana")
print(thisset)   #{'apple', 'cherry'}

thisset = {"apple", "banana", "cherry"}
thisset.discard("banana")
print(thisset)   #{'cherry', 'apple'}

#Remove a random item by using the pop() method. 
#You can also use the pop() method to remove an item, but this method will remove a random item, so you cannot be sure what item that gets removed.
#The return value of the pop() method is the removed item.
thisset = {"apple", "banana", "cherry"}
x = thisset.pop()
print(x)   #removed item - banana
print(thisset)   #the set after removal - {'apple', 'cherry'}

#The clear() method empties the set
thisset = {"apple", "banana", "cherry"}
thisset.clear()
print(thisset)   #set()

#The del keyword will delete the set completely
thisset = {"apple", "banana", "cherry"}
del thisset
print(thisset)   ##this will raise an error because the set no longer exists

#The union() method returns a new set with all items from both sets.
set1 = {"a", "b", "c"}
set2 = {1, 2, 3}
set3 = set1.union(set2)
print(set3)   #{1, 'a', 'c', 2, 'b', 3}

#You can use the | operator instead of the union() method, and you will get the same result.
set1 = {"a", "b", "c"}
set2 = {1, 2, 3}
set3 = set1 | set2
print(set3)   #{3, 'b', 'c', 'a', 2, 1}

#The union() method allows you to join a set with other data types, like lists or tuples. The result will be a set.
x = {"a", "b", "c"}
y = (1, 2, 3)
z = x.union(y)
print(z)   #{2, 3, 'b', 'a', 'c', 1}

#The intersection() method will return a new set, that only contains the items that are present in both sets. Keep ONLY the duplicates.
set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set3 = set1.intersection(set2)
print(set3)   #{'apple'}

#You can use the & operator instead of the intersection() method, and you will get the same result.
set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set3 = set1 & set2
print(set3)   #{'apple'}

#Note: The & operator only allows you to join sets with sets, and not with other data types like you can with the intersection() method.
#The intersection_update() method will also keep ONLY the duplicates, but it will change the original set instead of returning a new set.
set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set1.intersection_update(set2)
print(set1)   #{'apple'}

#The values True and 1 are considered the same value. The same goes for False and 0.
set1 = {"apple", 1,  "banana", 0, "cherry"}
set2 = {False, "google", 1, "apple", 2, True}
set3 = set1.intersection(set2)
print(set3)   #{False, True, 'apple'}

#The difference() method will return a new set that will contain only the items from the first set that are not present in the other set.
set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set3 = set1.difference(set2)
print(set3)   #{'banana', 'cherry'}

#You can use the - operator instead of the difference() method, and you will get the same result.
set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set3 = set1 - set2
print(set3)   #{'banana', 'cherry'}

#Note: The - operator only allows you to join sets with sets, and not with other data types like you can with the difference() method.
#The difference_update() method will also keep the items from the first set that are not in the other set, but it will change the original set instead of returning a new set.
set1 = {"apple", "banana" , "cherry"}
set2 = {"google", "microsoft", "apple"}
set1.difference_update(set2)
print(set1)   #{'banana', 'cherry'}

#The symmetric_difference() method will keep only the elements that are NOT present in both sets.
set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set3 = set1.symmetric_difference(set2)
print(set3)   #{'google', 'banana', 'microsoft', 'cherry'}

#You can use the ^ operator instead of the symmetric_difference() method, and you will get the same result.
set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set3 = set1 ^ set2
print(set3)   #{'google', 'banana', 'microsoft', 'cherry'}

#Note: The ^ operator only allows you to join sets with sets, and not with other data types like you can with the symmetric_difference() method.
#The symmetric_difference_update() method will also keep all but the duplicates, but it will change the original set instead of returning a new set.
set1 = {"apple", "banana", "cherry"}
set2 = {"google", "microsoft", "apple"}
set1.symmetric_difference_update(set2)
print(set1)   #{'google', 'banana', 'microsoft', 'cherry'}

#You can loop through the set items by using a for loop
#Loop through the set, and print the values:
thisset = {"apple", "banana", "cherry"}
for x in thisset:
  print(x)
>>>banana
   apple
   cherry

thisset = {"apple", "banana", "cherry"}
print("banana" in thisset)   #True

#SYNTAX: for item in set:
             # Code block to execute
# Defining a set with multiple elements
my_set = {25, 12, 10, -21, 10, 100}
# Loop through each item in the set 
for item in my_set:
   # Performing operations on each element
   print("Item:", item)
# Output
Item: 100
Item: 25
Item: 10
Item: -21
Item: 12

# Creating an empty set
my_set = set()  
# Looping through a sequence and adding elements to the set
for i in range(5):
   my_set.add(i)
print(my_set)  
# It will produce the following output −
{0, 1, 2, 3, 4}


#DICTIONARIES
"""
Dictionaries are used to store data values in key:value pairs, and can be referred to by using the key name.
A dictionary is a collection which is ordered*, changeable and do not allow duplicates.
Dictionaries are written with curly brackets, and have keys and values
To determine how many items a dictionary has, use the len() function
"""
#Create and print a dictionary:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)    #{'brand': 'Ford', 'model': 'Mustang', 'year': 1964}

#Dictionary items are presented in key:value pairs, and can be referred to by using the key name. Example: Print the "brand" value of the dictionary
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict["brand"])    #Ford

#Dictionaries cannot have two items with the same key. Example: Duplicate values will overwrite existing values
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964,
  "year": 2020
}
print(thisdict)      #{'brand': 'Ford', 'model': 'Mustang', 'year': 2020}

#To determine how many items a dictionary has, use the len() function
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964,
  "year": 2020
}
print(len(thisdict))    #3

#You can access the items of a dictionary by referring to its key name, inside square brackets: Get the value of the "model" key
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
x = thisdict["model"]    #Mustang

#There is also a method called get() that will give you the same result:
x = thisdict.get("model")    #Mustang

#The keys() method will return a list of all the keys in the dictionary.
x = thisdict.keys()    #dict_keys(['brand', 'model', 'year'])

#The list of the keys is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the keys list.
#Add a new item to the original dictionary, and see that the keys list gets updated as well:
car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}
x = car.keys()
print(x) #before the change - dict_keys(['brand', 'model', 'year'])
car["color"] = "white"
print(x) #after the change - dict_keys(['brand', 'model', 'year', 'color'])

#The values() method will return a list of all the values in the dictionary.
x = thisdict.values()    #dict_values(['Ford', 'Mustang', 1964])

#The list of the values is a view of the dictionary, meaning that any changes done to the dictionary will be reflected in the values list.
#Make a change in the original dictionary, and see that the values list gets updated as well:
car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}
x = car.values()
print(x)   #before the change - dict_values(['Ford', 'Mustang', 1964])
car["year"] = 2020
print(x)   #after the change - dict_values(['Ford', 'Mustang', 2020])

#Add a new item to the original dictionary, and see that the values list gets updated as well:
car = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}
x = car.values()
print(x)   #before the change - dict_values(['Ford', 'Mustang', 1964])
car["color"] = "red"
print(x)   #after the change - dict_values(['Ford', 'Mustang', 1964, 'red'])

#The items() method will return each item in a dictionary, as tuples in a list.
x = thisdict.items()    #dict_items([('brand', 'Ford'), ('model', 'Mustang'), ('year', 1964)])

#To determine if a specified key is present in a dictionary use the in keyword. Example: Check if "model" is present in the dictionary
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
if "model" in thisdict:
  print("Yes, 'model' is one of the keys in the thisdict dictionary")    #Yes, 'model' is one of the keys in the thisdict dictionary

#The update() method will update the dictionary with the items from the given argument. Update the "year" of the car by using the update() method:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.update({"year": 2020})    #{'brand': 'Ford', 'model': 'Mustang', 'year': 2020}

#The pop() method removes the item with the specified key name:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.pop("model")
print(thisdict)   #{'brand': 'Ford', 'year': 1964}

#The popitem() method removes the last inserted item
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.popitem()
print(thisdict)     #{'brand': 'Ford', 'model': 'Mustang'}

#The del keyword removes the item with the specified key name:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
del thisdict["model"]
print(thisdict)     #{'brand': 'Ford', 'year': 1964}

#The del keyword can also delete the dictionary completely:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
del thisdict
print(thisdict)   #this will cause an error because "thisdict" no longer exists.

The clear() method empties the dictionary:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.clear()
print(thisdict)     #{}

#Make a copy of a dictionary with the copy() method:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
mydict = thisdict.copy()
print(mydict)    #{'brand': 'Ford', 'model': 'Mustang', 'year': 1964}

#Make a copy of a dictionary with the dict() function:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
mydict = dict(thisdict)
print(mydict)     #{'brand': 'Ford', 'model': 'Mustang', 'year': 1964}
